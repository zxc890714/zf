class ClientThread {
public:
    ClientThread(asio::io_context& io_context)
        : io_context_(io_context),
          socket_(io_context),
          is_running_(true),
          is_connected_(false),
          inactivity_timer_(io_context) {
    }

    ~ClientThread() {
        stop();
    }

    void stop() {
        is_running_ = false;
        if (socket_.is_open()) {
            asio::error_code ec;
            socket_.close(ec);
        }
    }

    void sendMessage(const std::string& server_host, unsigned short server_port, const Message& message) {
        asio::post(io_context_, [this, server_host, server_port, message]() {
            if (!is_connected_ || current_server_host_ != server_host || current_server_port_ != server_port) {
                // 如果没有连接，或者连接的服务器与当前不同，则重新连接
                if (socket_.is_open()) {
                    socket_.close();
                }
                current_server_host_ = server_host;
                current_server_port_ = server_port;
                server_endpoint_ = asio::ip::tcp::endpoint(asio::ip::address::from_string(server_host), server_port);
                is_connected_ = false;
                doConnect(message);
            } else {
                // 如果已经连接到正确的服务器，直接发送消息
                doWrite(message);
            }
        });
    }

private:
    void doConnect(const Message& message) {
        socket_.async_connect(server_endpoint_,
            [this, message](const asio::error_code& error) {
                if (!error) {
                    std::cout << "Connected to server: " << current_server_host_ << ":" << current_server_port_ << std::endl;
                    is_connected_ = true;
                    doWrite(message);
                    startInactivityTimer();
                } else {
                    std::cerr << "Connection failed: " << error.message() << std::endl;
                    is_connected_ = false;
                }
            });
    }

    void doWrite(const Message& message) {
        asio::async_write(socket_,
            asio::buffer(message.data),
            [this](const asio::error_code& error, std::size_t /*bytes_transferred*/) {
                if (!error) {
                    std::cout << "Message sent successfully" << std::endl;
                    restartInactivityTimer();
                    doRead(); // 开始读取服务器的响应
                } else {
                    std::cerr << "Write error: " << error.message() << std::endl;
                    handleDisconnect();
                }
            });
    }

    void doRead() {
        socket_.async_read_some(asio::buffer(read_buffer_),
            [this](const asio::error_code& error, std::size_t bytes_transferred) {
                if (!error) {
                    std::string received_data(read_buffer_.data(), bytes_transferred);
                    std::cout << "Received: " << received_data << std::endl;
                    restartInactivityTimer();
                    doRead();  // 继续读取
                } else {
                    std::cerr << "Read error: " << error.message() << std::endl;
                    handleDisconnect();
                }
            });
    }

    void handleDisconnect() {
        is_connected_ = false;
        socket_.close();
    }

    void startInactivityTimer() {
        inactivity_timer_.expires_after(std::chrono::seconds(30));
        inactivity_timer_.async_wait([this](const asio::error_code& error) {
            if (!error) {
                std::cout << "Inactivity timeout, disconnecting." << std::endl;
                handleDisconnect();
            }
        });
    }

    void restartInactivityTimer() {
        inactivity_timer_.cancel();
        startInactivityTimer();
    }

    asio::io_context& io_context_;
    asio::ip::tcp::socket socket_;
    asio::ip::tcp::endpoint server_endpoint_;
    std::atomic<bool> is_running_;
    std::atomic<bool> is_connected_;
    asio::steady_timer inactivity_timer_;
    std::array<char, 1024> read_buffer_;
    std::string current_server_host_;
    unsigned short current_server_port_;
};

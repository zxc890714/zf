bool isValidGNSSHeader(const std::string& data) {
    // 1. 基本长度检查
    if(data.length() < 6) {
        return false;
    }

    // 2. 检查起始字符 "$"
    if(data[0] != '$') {
        return false;
    }

    // 3. 获取系统标识和消息类型
    std::string sysId = data.substr(1, 2);    // GP or BD
    std::string msgType = data.substr(3, 3);  // GGA, RMC等

    // 4. 判断是否是GPS或北斗
    if(sysId != "GP" && sysId != "BD") {
        return false;
    }

    // 5. 检查常见的消息类型
    static const std::unordered_set<std::string> validTypes = {
        "GGA",  // 定位信息
        "RMC",  // 推荐最小定位信息
        "GSA",  // 当前卫星信息
        "GSV",  // 可见卫星信息
        "VTG",  // 地面速度信息
        "ZDA"   // 时间和日期
    };

    return validTypes.find(msgType) != validTypes.end();
}

// 如果需要更详细的信息返回：
struct GNSSHeader {
    bool isValid;
    std::string system;    // "GPS" or "BeiDou"
    std::string msgType;   // "GGA", "RMC" etc.
    std::string error;
};

GNSSHeader parseGNSSHeader(const std::string& data) {
    GNSSHeader result{false, "", "", ""};
    
    if(data.length() < 6) {
        result.error = "Data too short";
        return result;
    }

    if(data[0] != '$') {
        result.error = "Invalid start character";
        return result;
    }

    std::string sysId = data.substr(1, 2);
    std::string msgType = data.substr(3, 3);

    // 系统类型判断
    if(sysId == "GP") {
        result.system = "GPS";
    } else if(sysId == "BD") {
        result.system = "BeiDou";
    } else {
        result.error = "Unknown system identifier";
        return result;
    }

    // 消息类型判断
    static const std::unordered_set<std::string> validTypes = {
        "GGA", "RMC", "GSA", "GSV", "VTG", "ZDA"
    };

    if(validTypes.find(msgType) == validTypes.end()) {
        result.error = "Invalid message type";
        return result;
    }

    result.isValid = true;
    result.msgType = msgType;
    return result;
}

// 使用示例
void processGNSSData(const std::string& data) {
    auto header = parseGNSSHeader(data);
    if(!header.isValid) {
        std::cout << "Invalid GNSS data: " << header.error << std::endl;
        return;
    }

    std::cout << "System: " << header.system 
              << ", Message Type: " << header.msgType << std::endl;
    
    // 继续处理数据...
}

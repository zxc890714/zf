import socket
import threading
import time
from concurrent.futures import ThreadPoolExecutor

def send_packet(sock, target_ip, target_port, packet):
    try:
        sock.sendto(packet, (target_ip, target_port))
    except:
        pass

def sender_thread(target_ip, target_port, packet_size, packets_per_thread):
    # 创建UDP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    
    # 生成随机数据包
    packet = b'X' * packet_size
    
    # 使用线程池来并发发送数据包
    with ThreadPoolExecutor(max_workers=50) as executor:
        while True:
            futures = []
            start_time = time.time()
            
            # 提交发包任务到线程池
            for _ in range(packets_per_thread):
                future = executor.submit(send_packet, sock, target_ip, target_port, packet)
                futures.append(future)
            
            # 等待所有任务完成    
            for future in futures:
                future.result()
                
            # 控制发包速率
            elapsed = time.time() - start_time
            if elapsed < 1:
                time.sleep(1 - elapsed)

def main():
    target_ip = "127.0.0.1"  # 目标IP
    target_port = 12345      # 目标端口
    packet_size = 1024       # 数据包大小(字节)
    thread_count = 4         # 线程数量
    packets_per_thread = 10000  # 每个线程每秒发送的包数
    
    # 启动多个发包线程
    threads = []
    for _ in range(thread_count):
        t = threading.Thread(target=sender_thread, 
                           args=(target_ip, target_port, packet_size, packets_per_thread))
        t.daemon = True
        t.start()
        threads.append(t)
    
    # 等待所有线程结束    
    for t in threads:
        t.join()

if __name__ == "__main__":
    main()
